generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model certifications {
  id            BigInt    @id @default(autoincrement())
  name          String    @db.VarChar(255)
  location      String    @db.VarChar(255)
  highlights    Json?     @db.Json
  date_acquired String    @db.VarChar(255)
  media         String?   @db.VarChar(255)
  link          String?   @db.VarChar(255)
  user_id       BigInt
  created_at    DateTime? @db.Timestamp(0)
  updated_at    DateTime? @db.Timestamp(0)
  users         users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "certifications_user_id_foreign")
}

model clients {
  id         String    @id @db.Uuid
  user_id    BigInt    @unique(map: "clients_user_id_unique")
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  secret     String?   @db.VarChar(64)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "clients_user_id_foreign")
}

model experiences {
  id         BigInt    @id @default(autoincrement())
  role       String    @db.VarChar(255)
  location   String    @db.VarChar(255)
  highlights Json?     @db.Json
  start_date String    @db.VarChar(255)
  end_date   String    @db.VarChar(255)
  active     Boolean?
  user_id    BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "experiences_user_id_foreign")
}

model profiles {
  id              BigInt    @id @default(autoincrement())
  fullname        String    @db.VarChar(255)
  job_description String    @db.VarChar(255)
  bio             String
  phone           String    @db.VarChar(255)
  email           String    @db.VarChar(255)
  location        String    @db.VarChar(255)
  user_id         BigInt    @unique(map: "profiles_user_id_unique")
  created_at      DateTime? @db.Timestamp(0)
  updated_at      DateTime? @db.Timestamp(0)
  users           users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "profiles_user_id_foreign")
}

model projects {
  id          BigInt    @id @default(autoincrement())
  name        String    @db.VarChar(255)
  description String?
  link        String?   @db.VarChar(255)
  repository  String?   @db.VarChar(255)
  tags        Json?     @db.Json
  user_id     BigInt
  image       String?   @db.VarChar(255)
  created_at  DateTime? @db.Timestamp(0)
  updated_at  DateTime? @db.Timestamp(0)
  users       users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "projects_user_id_foreign")
}

model socials {
  id         BigInt    @id @default(autoincrement())
  name       String    @db.VarChar(255)
  value      String    @db.VarChar(255)
  icon       String?
  link       String?   @db.VarChar(255)
  user_id    BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "socials_user_id_foreign")
}

model stacks {
  id         BigInt    @id @default(autoincrement())
  name       String    @db.VarChar(255)
  link       String?   @db.VarChar(255)
  icon       String?   @db.VarChar(255)
  user_id    BigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  users      users     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "stacks_user_id_foreign")
}

model users {
  id             BigInt           @id @default(autoincrement())
  certifications certifications[]
  clients        clients?
  experiences    experiences[]
  profiles       profiles?
  projects       projects[]
  socials        socials[]
  stacks         stacks[]
}
